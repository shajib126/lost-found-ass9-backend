// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  name       String
  email      String       @unique
  password   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deactivated      Boolean      @default(false)
  role      String   @default("user")
  foundItems FoundItem[]
  lostItems  LostItem[]
  claims     Claim[]
  profile    UserProfile?
}

model FoundItemCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  foundItems FoundItem[]
  lostItems  LostItem[]
}

model FoundItem {
  id            String   @id @default(uuid())
  userId        String
  categoryId    String
  foundItemName String
  brand         String
  primaryColor  String
  secondayColor String
  foundDate     DateTime
  location      String
  phone         String?
  email         String?
  images        String[]
  firstName     String?
  lastName      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user     User              @relation(fields: [userId], references: [id])
  category FoundItemCategory @relation(fields: [categoryId], references: [id])
  claims   Claim[]
}

model LostItem {
  id            String            @id @default(uuid())
  userId        String
  lostItemName  String
  categoryId    String
  brand         String
  primaryColor  String
  secondayColor String
  lostDate      DateTime?
  location      String?
  isFound       Boolean           @default(false)
  phone         String?
  email         String?
  images        String[]
  firstName     String?
  lastName      String?
  user          User              @relation(fields: [userId], references: [id])
  category      FoundItemCategory @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Claim {
  id                     String   @id @default(uuid())
  userId                 String
  foundItemId            String
  status                 String   @default("PENDING")
  distinguishingFeatures String
  lostDate               DateTime
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  foundItem FoundItem @relation(fields: [foundItemId], references: [id])
}

model UserProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String?
  age       Int?     @default(0)
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String   @default("user")
  user      User     @relation(fields: [userId], references: [id])
}
